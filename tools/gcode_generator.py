# ==============================================================
#  File: tools/gcode_generator.py
#  Purpose: توليد G-Code لعمليات الحفر والإكسترود من شجرة العمليات
# ==============================================================

from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional
import time


@dataclass
class GCodeSettings:
    units: str = "G21"       # millimeters
    absolute: str = "G90"    # absolute positioning
    feed: float = 100.0
    spindle: Optional[int] = 8000
    safe_z: float = 5.0
    comment: str = "Generated by Syriantech CAD"


@dataclass
class HoleOp:
    x: float
    y: float
    z: float
    dia: float
    depth: float
    axis: str = "Z"


@dataclass
class ExtrudeOp:
    height: float
    axis: str = "Y"
    profile: str = "unknown"


def _fmt(v: float) -> str:
    return f"{v:.3f}"


# -------------------------------------------------------
# G-code توليد
# -------------------------------------------------------
def generate_program(operations: List[dict], settings: Optional[GCodeSettings] = None) -> str:
    if settings is None:
        settings = GCodeSettings()

    lines = []
    lines.append(f"({settings.comment})")
    lines.append(settings.units)
    lines.append(settings.absolute)
    if settings.spindle:
        lines.append(f"M3 S{settings.spindle}")
    lines.append("")

    for i, op in enumerate(operations, 1):
        t = op.get("type", "").lower()
        lines.append(f"(--- Operation #{i}: {op.get('type','?')} ---)")
        if t == "hole":
            lines.extend(_generate_hole_block(op, settings))
        elif t == "extrude":
            lines.extend(_generate_extrude_block(op, settings))
        else:
            lines.append(f"(⚠️ Unsupported operation: {t})")
        lines.append("")

    lines.append("M5")
    lines.append("G0 X0 Y0 Z0")
    lines.append("M30")
    return "\n".join(lines)


def _generate_hole_block(op, s):
    x, y, z = op.get("x", 0), op.get("y", 0), op.get("z", 0)
    dia, depth, axis = op.get("dia", 0), op.get("depth", 0), op.get("axis", "Z")
    lines = []
    lines.append(f"(Hole dia={dia}, depth={depth}, axis={axis})")
    if axis.upper() == "Z":
        lines.append(f"G0 X{_fmt(x)} Y{_fmt(y)} Z{s.safe_z}")
        lines.append(f"G1 Z-{_fmt(abs(depth))} F{s.feed}")
        lines.append(f"G0 Z{s.safe_z}")
    elif axis.upper() == "Y":
        lines.append(f"G0 X{_fmt(x)} Z{_fmt(z)} Y{s.safe_z}")
        lines.append(f"G1 Y-{_fmt(abs(depth))} F{s.feed}")
        lines.append(f"G0 Y{s.safe_z}")
    elif axis.upper() == "X":
        lines.append(f"G0 Y{_fmt(y)} Z{_fmt(z)} X{s.safe_z}")
        lines.append(f"G1 X-{_fmt(abs(depth))} F{s.feed}")
        lines.append(f"G0 X{s.safe_z}")
    return lines


def _generate_extrude_block(op, s):
    h, axis, profile = op.get("distance", 0), op.get("axis", "Y"), op.get("profile", "unknown")
    lines = []
    lines.append(f"(Extrude {profile} height={h} axis={axis})")
    lines.append(f"(⚙️ Placeholder: Extrude not yet implemented in G-code motion)")
    return lines


def save_program(program_text: str, out_dir: Path, filename: Optional[str] = None) -> Path:
    out_dir.mkdir(parents=True, exist_ok=True)
    if not filename:
        stamp = time.strftime("%Y%m%d_%H%M%S")
        filename = f"program_{stamp}.nc"
    out_path = (out_dir / filename).with_suffix(".nc")
    out_path.write_text(program_text, encoding="utf-8")
    print(f"💾 [GCODE] Saved: {out_path}")
    return out_path
